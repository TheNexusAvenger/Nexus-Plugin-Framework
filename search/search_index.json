{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Nexus Plugin Framework Nexus Plugin Framework simplifies development of Roblox Plugins by internally implementing common features (like theme colors and Qt scroll bars).","title":"Home"},{"location":"#nexus-plugin-framework","text":"Nexus Plugin Framework simplifies development of Roblox Plugins by internally implementing common features (like theme colors and Qt scroll bars).","title":"Nexus Plugin Framework"},{"location":"contributing/","text":"Contributing Bugs and requests can be made through issues. Pull requests are open, but will only be accepted if they have the following: 1. A reason to be pulled. 2. Follow the existing coding standards (tabs, PascalCase, etc). 3. Have the appropriate unit tests as examples. This is mainly for new utilities. 4. Comments are included. The project structure of this repository is version 0.5 of Rojo by LPGhatguy . Nexus Git can be used instead if Roblox Studio is used as the IDE instead of a text editor like Microsoft Visual Studio Code. Nexus Git can be used to sync into and out of Roblox Studio, while Rojo can currently only sync into Roblox Studio.","title":"Contributing"},{"location":"contributing/#contributing","text":"Bugs and requests can be made through issues. Pull requests are open, but will only be accepted if they have the following: 1. A reason to be pulled. 2. Follow the existing coding standards (tabs, PascalCase, etc). 3. Have the appropriate unit tests as examples. This is mainly for new utilities. 4. Comments are included. The project structure of this repository is version 0.5 of Rojo by LPGhatguy . Nexus Git can be used instead if Roblox Studio is used as the IDE instead of a text editor like Microsoft Visual Studio Code. Nexus Git can be used to sync into and out of Roblox Studio, while Rojo can currently only sync into Roblox Studio.","title":"Contributing"},{"location":"classes/NexusPluginFramework/","text":"NexusPluginFramework (instance of NexusProject ) Main module for Nexus Plugin Framework. object NexusPluginFramework.new(string ClassName,object ...) Creates either a Nexus Plugin Framework class or a wrapped Roblox class for Nexus Plugin Framework. Not all classes are exposed through this function. The following class names are added as custom instances: Signal ( NexusInstance.Event.RobloxEvent ) UserInput ( Plugin.NexusUserInput ) CollapsableListFrame ( UI.CollapsableList.NexusCollapsableListFrame ) ListContentsPropertyConstraint ( UI.CollapsableList.Constraint.NexusContentsPropertyConstraint ) ListMultiConstraint ( UI.CollapsableList.Constraint.NexusMultiConstraint ) ListSelectionConstraint ( UI.CollapsableList.Constraint.NexusSelectionConstraint ) BoundingSizeConstraint ( UI.Constraint.NexusBoundingSizeConstraint ) CheckBox ( UI.Input.NexusCheckBox ) ScrollBar ( UI.Scroll.NexusScrollBar ) The following Roblox Instances have custom implementations of classes: PluginButton ( Plugin.NexusPluginButton ) PluginGui ( Plugin.NexusPluginGui ) PluginToolbar ( Plugin.NexusPluginToolbar ) ImageButton ( UI.Input.NexusImageButton ) TextBox ( UI.Input.NexusTextBox ) ScrollingFrame ( UI.Scroll.NexusScrollingFrame ) If an instance is created using this method and isn't on the list, a wrapped version of the instance is used. NexusInstance NexusPluginFramework:GetClass(string ClassName) Returns the class for a given name. NexusPlugin NexusPluginFramework:GetPlugin() Returns the plugin instance. NexusSettings NexusPluginFramework:GetSettings() Returns the settings instance. void NexusPluginFramework:SetPlugin( NexusPlugin Plugin) Sets the plugin instance. Needed when initializing the framework.","title":"NexusPluginFramework"},{"location":"classes/NexusPluginFramework/#nexuspluginframework","text":"(instance of NexusProject ) Main module for Nexus Plugin Framework.","title":"NexusPluginFramework"},{"location":"classes/NexusPluginFramework/#object-nexuspluginframeworknewstring-classnameobject","text":"Creates either a Nexus Plugin Framework class or a wrapped Roblox class for Nexus Plugin Framework. Not all classes are exposed through this function. The following class names are added as custom instances: Signal ( NexusInstance.Event.RobloxEvent ) UserInput ( Plugin.NexusUserInput ) CollapsableListFrame ( UI.CollapsableList.NexusCollapsableListFrame ) ListContentsPropertyConstraint ( UI.CollapsableList.Constraint.NexusContentsPropertyConstraint ) ListMultiConstraint ( UI.CollapsableList.Constraint.NexusMultiConstraint ) ListSelectionConstraint ( UI.CollapsableList.Constraint.NexusSelectionConstraint ) BoundingSizeConstraint ( UI.Constraint.NexusBoundingSizeConstraint ) CheckBox ( UI.Input.NexusCheckBox ) ScrollBar ( UI.Scroll.NexusScrollBar ) The following Roblox Instances have custom implementations of classes: PluginButton ( Plugin.NexusPluginButton ) PluginGui ( Plugin.NexusPluginGui ) PluginToolbar ( Plugin.NexusPluginToolbar ) ImageButton ( UI.Input.NexusImageButton ) TextBox ( UI.Input.NexusTextBox ) ScrollingFrame ( UI.Scroll.NexusScrollingFrame ) If an instance is created using this method and isn't on the list, a wrapped version of the instance is used.","title":"object NexusPluginFramework.new(string ClassName,object ...)"},{"location":"classes/NexusPluginFramework/#nexusinstance-nexuspluginframeworkgetclassstring-classname","text":"Returns the class for a given name.","title":"NexusInstance NexusPluginFramework:GetClass(string ClassName)"},{"location":"classes/NexusPluginFramework/#nexusplugin-nexuspluginframeworkgetplugin","text":"Returns the plugin instance.","title":"NexusPlugin NexusPluginFramework:GetPlugin()"},{"location":"classes/NexusPluginFramework/#nexussettings-nexuspluginframeworkgetsettings","text":"Returns the settings instance.","title":"NexusSettings NexusPluginFramework:GetSettings()"},{"location":"classes/NexusPluginFramework/#void-nexuspluginframeworksetpluginnexuspluginplugin","text":"Sets the plugin instance. Needed when initializing the framework.","title":"void NexusPluginFramework:SetPlugin(NexusPlugin&nbsp;Plugin)"},{"location":"classes/Base/NexusContainer/","text":"NexusContainer (extends OverridableIndexInstance , mirrors Instance ) Mirrors the API of Roblox Instances for containing children and being parented. string NexusContainer.Name A non-unique identifier of the NexusContainer . bool NexusContainer.Archivable Determines if an NexusContainer can be cloned using NexusContainer:Clone . bool NexusContainer.Hidden Determines if the NexusContainer will appear when using GetChildren and GetDescendants . Intended to be used to hide sub-containers of containers for additional functionality such as scroll bars on frames. NexusEvent NexusContainer.AncestryChanged Fires when the NexusContainer.Parent property of the object or one of its ancestors is changed. NexusEvent NexusContainer.ChildAdded Fires when an object is parented to this NexusContainer . NexusEvent NexusContainer.ChildRemoved Fires when a child is removed from this NexusContainer . NexusEvent NexusContainer.DescendantAdded Fires when a descendant is added to the NexusContainer . NexusEvent NexusContainer.DescendantRemoving Fires immediately before a descendant of the NexusContainer is removed. void NexusContainer:ClearAllChildren() This function destroys all of an NexusContainer 's children. NexusContainer NexusContainer:Clone() Create a deep copy of a NexusContainer and descendants where Archivable = true . void NexusContainer:Destroy() Sets the NexusContainer.Parent property to nil, locks the NexusContainer.Parent property, and calls Destroy on all children. NexusContainer NexusContainer:FindFirstAncestor(string Name) Returns the first ancestor of the NexusContainer whose NexusContainer.Name is equal to the given Name . NexusContainer NexusContainer:FindFirstAncestorOfClass(string ClassName) Returns the first ancestor of the NexusContainer whose NexusContainer.ClassName is equal to the given ClassName . NexusContainer NexusContainer:FindFirstAncestorWhichIsA(string ClassName) Returns the first ancestor of the NexusContainer for whom NexusContainer:IsA returns true for the given ClassName. NexusContainer NexusContainer:FindFirstChild(string Name,bool Recursive) Returns the first child of the NexusContainer found with the given name. NexusContainer NexusContainer:FindFirstChildOfClass(string ClassName) Returns the first child of the NexusContainer whose ClassName is equal to the given ClassName . NexusContainer NexusContainer:FindFirstChildWhichIsA(string ClassName,bool Recursive) Returns the first child of the NexusContainer for whom NexusContainer:IsA returns true for the given ClassName . List<NexusContainer> NexusContainer:GetChildren() Returns an array containing all of the NexusContainers 's children. List<NexusContainer> NexusContainer:GetDescendants() Returns an array containing all of the descendants of the NexusContainer . string NexusContainer:GetFullName() Returns a string describing the NexusContainer 's ancestry. bool NexusContainer:IsAncestorOf(NexusContainer OtherContainer) Returns true if an NexusContainer is an ancestor of the given descendant. bool NexusContainer:IsDescendantOf(NexusContainer OtherContainer) Returns true if an NexusContainer is a descendant of the given ancestor. NexusContainer NexusContainer:WaitForChild(string Name,float TimeOut) Returns the child of the NexusContainer with the given name. If the child does not exist, it will yield the current thread until it does. NexusConnection NexusContainer:ConnectToHighestParent(string EventName,function ConnectionFunction) Connects an event to the highest parent. If the ancestry changes, the connected event changes. Returns a connection.","title":"NexusContainer"},{"location":"classes/Base/NexusContainer/#nexuscontainer","text":"(extends OverridableIndexInstance , mirrors Instance ) Mirrors the API of Roblox Instances for containing children and being parented.","title":"NexusContainer"},{"location":"classes/Base/NexusContainer/#string-nexuscontainername","text":"A non-unique identifier of the NexusContainer .","title":"string NexusContainer.Name"},{"location":"classes/Base/NexusContainer/#bool-nexuscontainerarchivable","text":"Determines if an NexusContainer can be cloned using NexusContainer:Clone .","title":"bool NexusContainer.Archivable"},{"location":"classes/Base/NexusContainer/#bool-nexuscontainerhidden","text":"Determines if the NexusContainer will appear when using GetChildren and GetDescendants . Intended to be used to hide sub-containers of containers for additional functionality such as scroll bars on frames.","title":"bool NexusContainer.Hidden"},{"location":"classes/Base/NexusContainer/#nexusevent-nexuscontainerancestrychanged","text":"Fires when the NexusContainer.Parent property of the object or one of its ancestors is changed.","title":"NexusEvent NexusContainer.AncestryChanged"},{"location":"classes/Base/NexusContainer/#nexusevent-nexuscontainerchildadded","text":"Fires when an object is parented to this NexusContainer .","title":"NexusEvent NexusContainer.ChildAdded"},{"location":"classes/Base/NexusContainer/#nexusevent-nexuscontainerchildremoved","text":"Fires when a child is removed from this NexusContainer .","title":"NexusEvent NexusContainer.ChildRemoved"},{"location":"classes/Base/NexusContainer/#nexusevent-nexuscontainerdescendantadded","text":"Fires when a descendant is added to the NexusContainer .","title":"NexusEvent NexusContainer.DescendantAdded"},{"location":"classes/Base/NexusContainer/#nexusevent-nexuscontainerdescendantremoving","text":"Fires immediately before a descendant of the NexusContainer is removed.","title":"NexusEvent NexusContainer.DescendantRemoving"},{"location":"classes/Base/NexusContainer/#void-nexuscontainerclearallchildren","text":"This function destroys all of an NexusContainer 's children.","title":"void NexusContainer:ClearAllChildren()"},{"location":"classes/Base/NexusContainer/#nexuscontainer-nexuscontainerclone","text":"Create a deep copy of a NexusContainer and descendants where Archivable = true .","title":"NexusContainer NexusContainer:Clone()"},{"location":"classes/Base/NexusContainer/#void-nexuscontainerdestroy","text":"Sets the NexusContainer.Parent property to nil, locks the NexusContainer.Parent property, and calls Destroy on all children.","title":"void NexusContainer:Destroy()"},{"location":"classes/Base/NexusContainer/#nexuscontainer-nexuscontainerfindfirstancestorstring-name","text":"Returns the first ancestor of the NexusContainer whose NexusContainer.Name is equal to the given Name .","title":"NexusContainer NexusContainer:FindFirstAncestor(string Name)"},{"location":"classes/Base/NexusContainer/#nexuscontainer-nexuscontainerfindfirstancestorofclassstring-classname","text":"Returns the first ancestor of the NexusContainer whose NexusContainer.ClassName is equal to the given ClassName .","title":"NexusContainer NexusContainer:FindFirstAncestorOfClass(string ClassName)"},{"location":"classes/Base/NexusContainer/#nexuscontainer-nexuscontainerfindfirstancestorwhichisastring-classname","text":"Returns the first ancestor of the NexusContainer for whom NexusContainer:IsA returns true for the given ClassName.","title":"NexusContainer NexusContainer:FindFirstAncestorWhichIsA(string ClassName)"},{"location":"classes/Base/NexusContainer/#nexuscontainer-nexuscontainerfindfirstchildstring-namebool-recursive","text":"Returns the first child of the NexusContainer found with the given name.","title":"NexusContainer NexusContainer:FindFirstChild(string Name,bool Recursive)"},{"location":"classes/Base/NexusContainer/#nexuscontainer-nexuscontainerfindfirstchildofclassstring-classname","text":"Returns the first child of the NexusContainer whose ClassName is equal to the given ClassName .","title":"NexusContainer NexusContainer:FindFirstChildOfClass(string ClassName)"},{"location":"classes/Base/NexusContainer/#nexuscontainer-nexuscontainerfindfirstchildwhichisastring-classnamebool-recursive","text":"Returns the first child of the NexusContainer for whom NexusContainer:IsA returns true for the given ClassName .","title":"NexusContainer NexusContainer:FindFirstChildWhichIsA(string ClassName,bool Recursive)"},{"location":"classes/Base/NexusContainer/#listltnexuscontainergt-nexuscontainergetchildren","text":"Returns an array containing all of the NexusContainers 's children.","title":"List&lt;NexusContainer&gt; NexusContainer:GetChildren()"},{"location":"classes/Base/NexusContainer/#listltnexuscontainergt-nexuscontainergetdescendants","text":"Returns an array containing all of the descendants of the NexusContainer .","title":"List&lt;NexusContainer&gt; NexusContainer:GetDescendants()"},{"location":"classes/Base/NexusContainer/#string-nexuscontainergetfullname","text":"Returns a string describing the NexusContainer 's ancestry.","title":"string NexusContainer:GetFullName()"},{"location":"classes/Base/NexusContainer/#bool-nexuscontainerisancestorofnexuscontainer-othercontainer","text":"Returns true if an NexusContainer is an ancestor of the given descendant.","title":"bool NexusContainer:IsAncestorOf(NexusContainer OtherContainer)"},{"location":"classes/Base/NexusContainer/#bool-nexuscontainerisdescendantofnexuscontainer-othercontainer","text":"Returns true if an NexusContainer is a descendant of the given ancestor.","title":"bool NexusContainer:IsDescendantOf(NexusContainer OtherContainer)"},{"location":"classes/Base/NexusContainer/#nexuscontainer-nexuscontainerwaitforchildstring-namefloat-timeout","text":"Returns the child of the NexusContainer with the given name. If the child does not exist, it will yield the current thread until it does.","title":"NexusContainer NexusContainer:WaitForChild(string Name,float TimeOut)"},{"location":"classes/Base/NexusContainer/#nexusconnection-nexuscontainerconnecttohighestparentstring-eventnamefunction-connectionfunction","text":"Connects an event to the highest parent. If the ancestry changes, the connected event changes. Returns a connection.","title":"NexusConnection NexusContainer:ConnectToHighestParent(string EventName,function ConnectionFunction)"},{"location":"classes/Base/NexusDisablableContainer/","text":"NexusDisablableContainer (extends NexusContainer ) Guarentees a container can be enabled or disabled. bool NexusDisablableContainer.Disabled Bool for representing if the container is disabled. bool NexusDisablableContainer:IsEnabled() Returns if the container is enabled. Recommended over checking NexusDisablableContainer.Disabled since a class can override it to base off parent, children, or something external.","title":"NexusDisablableContainer"},{"location":"classes/Base/NexusDisablableContainer/#nexusdisablablecontainer","text":"(extends NexusContainer ) Guarentees a container can be enabled or disabled.","title":"NexusDisablableContainer"},{"location":"classes/Base/NexusDisablableContainer/#bool-nexusdisablablecontainerdisabled","text":"Bool for representing if the container is disabled.","title":"bool NexusDisablableContainer.Disabled"},{"location":"classes/Base/NexusDisablableContainer/#bool-nexusdisablablecontainerisenabled","text":"Returns if the container is enabled. Recommended over checking NexusDisablableContainer.Disabled since a class can override it to base off parent, children, or something external.","title":"bool NexusDisablableContainer:IsEnabled()"},{"location":"classes/Base/NexusWrappedInstance/","text":"NexusWrappedInstance (extends NexusDisablableContainer ) Wraps a Roblox Instance with the NexusContainer API. static NexusWrappedInstance NexusWrappedInstance.GetInstance(Instance ExistingInstance) Gets a Nexus Wrapped Instance from a string or an existing Roblox instance. When using existing instances, this should be used since it goes through a cache which prevents a single instance having multiple NexusWrappedInstance s. static NexusWrappedInstance NexusWrappedInstance.new(Instance ExistingInstance) Creates a Nexus Wrapped Instance object from a string or an existing Roblox instance. bool NexusWrappedInstance.Selected Bool for the NexusWrappedInstance being selected. Used for changing the colors based on selecting. Instance NexusWrappedInstance:GetWrappedInstance() Returns the wrapped instance.","title":"NexusWrappedInstance"},{"location":"classes/Base/NexusWrappedInstance/#nexuswrappedinstance","text":"(extends NexusDisablableContainer ) Wraps a Roblox Instance with the NexusContainer API.","title":"NexusWrappedInstance"},{"location":"classes/Base/NexusWrappedInstance/#static-nexuswrappedinstance-nexuswrappedinstancegetinstanceinstance-existinginstance","text":"Gets a Nexus Wrapped Instance from a string or an existing Roblox instance. When using existing instances, this should be used since it goes through a cache which prevents a single instance having multiple NexusWrappedInstance s.","title":"static NexusWrappedInstance NexusWrappedInstance.GetInstance(Instance ExistingInstance)"},{"location":"classes/Base/NexusWrappedInstance/#static-nexuswrappedinstance-nexuswrappedinstancenewinstance-existinginstance","text":"Creates a Nexus Wrapped Instance object from a string or an existing Roblox instance.","title":"static NexusWrappedInstance NexusWrappedInstance.new(Instance ExistingInstance)"},{"location":"classes/Base/NexusWrappedInstance/#bool-nexuswrappedinstanceselected","text":"Bool for the NexusWrappedInstance being selected. Used for changing the colors based on selecting.","title":"bool NexusWrappedInstance.Selected"},{"location":"classes/Base/NexusWrappedInstance/#instance-nexuswrappedinstancegetwrappedinstance","text":"Returns the wrapped instance.","title":"Instance NexusWrappedInstance:GetWrappedInstance()"},{"location":"classes/Base/OverridableIndexInstance/","text":"OverridableIndexInstance (extends NexusInstance ) Extends Nexus Instance to allow lower level overriding of indexing. object OverridableIndexInstance:__rawget(string Index) Returns the raw index of the object (bypasses __getindex ). object,bool verridableIndexInstance:__getindex(string IndexName,object OriginalReturn) Returns the value for a custom index. If the second value returned is true, it will force return the returned value, even if it is nil. If not, regular indexing will be used object OverridableIndexInstance:__setindex(string IndexName,object NewValue) Returns the value for an index to be set. This is run before the value of the object is set.","title":"OverridableIndexInstance"},{"location":"classes/Base/OverridableIndexInstance/#overridableindexinstance","text":"(extends NexusInstance ) Extends Nexus Instance to allow lower level overriding of indexing.","title":"OverridableIndexInstance"},{"location":"classes/Base/OverridableIndexInstance/#object-overridableindexinstance__rawgetstring-index","text":"Returns the raw index of the object (bypasses __getindex ).","title":"object OverridableIndexInstance:__rawget(string Index)"},{"location":"classes/Base/OverridableIndexInstance/#objectbool-verridableindexinstance__getindexstring-indexnameobject-originalreturn","text":"Returns the value for a custom index. If the second value returned is true, it will force return the returned value, even if it is nil. If not, regular indexing will be used","title":"object,bool verridableIndexInstance:__getindex(string IndexName,object OriginalReturn)"},{"location":"classes/Base/OverridableIndexInstance/#object-overridableindexinstance__setindexstring-indexnameobject-newvalue","text":"Returns the value for an index to be set. This is run before the value of the object is set.","title":"object OverridableIndexInstance:__setindex(string IndexName,object NewValue)"},{"location":"classes/Data/Enum/NexusEnum/","text":"NexusEnum (extends OverridableIndexInstance ) Custom enum that contains a set of items, including Enums. static NexusEnum NexusEnum.new(string Name) Creates an NexusEnum object. string NexusEnum.Name The name of the enum. NexusEnum NexusEnum.ParentEnum The parent enum of the enum. By default, it is nil and is defined with NexusEnum:AddEnum . NexusEnum NexusEnum:GetEnum(string EnumName) Returns an enum for the name. List<NexusEnum> NexusEnum:GetEnumItems() Returns a list of the sub-enums. void NexusEnum:AddEnum(NexusEnum EnumInstance) Adds an Enum. NexusEnum NexusEnum:CreateEnum(string ...) Creates an Enum. bool NexusEnum:Equals(NexusEnum OtherEnum) Returns if another enum item is equal.","title":"NexusEnum"},{"location":"classes/Data/Enum/NexusEnum/#nexusenum","text":"(extends OverridableIndexInstance ) Custom enum that contains a set of items, including Enums.","title":"NexusEnum"},{"location":"classes/Data/Enum/NexusEnum/#static-nexusenum-nexusenumnewstring-name","text":"Creates an NexusEnum object.","title":"static NexusEnum NexusEnum.new(string Name)"},{"location":"classes/Data/Enum/NexusEnum/#string-nexusenumname","text":"The name of the enum.","title":"string NexusEnum.Name"},{"location":"classes/Data/Enum/NexusEnum/#nexusenum-nexusenumparentenum","text":"The parent enum of the enum. By default, it is nil and is defined with NexusEnum:AddEnum .","title":"NexusEnum NexusEnum.ParentEnum"},{"location":"classes/Data/Enum/NexusEnum/#nexusenum-nexusenumgetenumstring-enumname","text":"Returns an enum for the name.","title":"NexusEnum NexusEnum:GetEnum(string EnumName)"},{"location":"classes/Data/Enum/NexusEnum/#listltnexusenumgt-nexusenumgetenumitems","text":"Returns a list of the sub-enums.","title":"List&lt;NexusEnum&gt; NexusEnum:GetEnumItems()"},{"location":"classes/Data/Enum/NexusEnum/#void-nexusenumaddenumnexusenum-enuminstance","text":"Adds an Enum.","title":"void NexusEnum:AddEnum(NexusEnum EnumInstance)"},{"location":"classes/Data/Enum/NexusEnum/#nexusenum-nexusenumcreateenumstring","text":"Creates an Enum.","title":"NexusEnum NexusEnum:CreateEnum(string ...)"},{"location":"classes/Data/Enum/NexusEnum/#bool-nexusenumequalsnexusenum-otherenum","text":"Returns if another enum item is equal.","title":"bool NexusEnum:Equals(NexusEnum OtherEnum)"},{"location":"classes/Data/Enum/NexusEnumCollection/","text":"NexusEnumCollection (extends NexusEnum ) Contains a set of Enums and can reference Roblox enums. static NexusEnumCollection NexusEnumCollection.GetBuiltInEnums() Returns the default enum group as NexusEnum . Which includes: NexusEnum.NexusScrollTheme.Native NexusEnum.NexusScrollTheme.Qt5 NexusEnum.CheckBoxState.Checked NexusEnum.CheckBoxState.Unchecked NexusEnum.CheckBoxState.Mixed","title":"NexusEnumCollection"},{"location":"classes/Data/Enum/NexusEnumCollection/#nexusenumcollection","text":"(extends NexusEnum ) Contains a set of Enums and can reference Roblox enums.","title":"NexusEnumCollection"},{"location":"classes/Data/Enum/NexusEnumCollection/#static-nexusenumcollection-nexusenumcollectiongetbuiltinenums","text":"Returns the default enum group as NexusEnum . Which includes: NexusEnum.NexusScrollTheme.Native NexusEnum.NexusScrollTheme.Qt5 NexusEnum.CheckBoxState.Checked NexusEnum.CheckBoxState.Unchecked NexusEnum.CheckBoxState.Mixed","title":"static NexusEnumCollection NexusEnumCollection.GetBuiltInEnums()"},{"location":"classes/Plugin/NexusPlugin/","text":"NexusPlugin (extends NexusContainer , implements Plugin ) Mirrors the API of Roblox's Plugin class. NexusPlugin/Plugin NexusPlugin.GetPlugin() Returns a static plugin instance. Note it may not be a \"mock\" plugin (NexusPlugin). void NexusPlugin.SetPlugin(NexusPlugin/Plugin Plugin) Sets the static plugin instance. Needed to be used in a Script since plugin is not defined in ModuleScripts , even if it required by a plugin Script .","title":"NexusPlugin"},{"location":"classes/Plugin/NexusPlugin/#nexusplugin","text":"(extends NexusContainer , implements Plugin ) Mirrors the API of Roblox's Plugin class.","title":"NexusPlugin"},{"location":"classes/Plugin/NexusPlugin/#nexuspluginplugin-nexusplugingetplugin","text":"Returns a static plugin instance. Note it may not be a \"mock\" plugin (NexusPlugin).","title":"NexusPlugin/Plugin NexusPlugin.GetPlugin()"},{"location":"classes/Plugin/NexusPlugin/#void-nexuspluginsetpluginnexuspluginplugin-plugin","text":"Sets the static plugin instance. Needed to be used in a Script since plugin is not defined in ModuleScripts , even if it required by a plugin Script .","title":"void NexusPlugin.SetPlugin(NexusPlugin/Plugin Plugin)"},{"location":"classes/Plugin/NexusPluginButton/","text":"NexusPluginButton (extends NexusWrappedInstance<PluginToolbarButton> ) Mirrors the API of Roblox's PluginButton class. static NexusPluginButton NexusPluginButton.new( NexusPluginToolbar ,string ButtonName,string ButtonTooltip string ButtonIcon)` Creates a Nexus Plugin Button object. bool NexusPluginButton.Active Sets if the button as active or not.","title":"NexusPluginButton"},{"location":"classes/Plugin/NexusPluginButton/#nexuspluginbutton","text":"(extends NexusWrappedInstance<PluginToolbarButton> ) Mirrors the API of Roblox's PluginButton class.","title":"NexusPluginButton"},{"location":"classes/Plugin/NexusPluginButton/#static-nexuspluginbutton-nexuspluginbuttonnewnexusplugintoolbarstring-buttonnamestring-buttontooltip-string-buttonicon","text":"Creates a Nexus Plugin Button object.","title":"static NexusPluginButton NexusPluginButton.new(NexusPluginToolbar,string ButtonName,string ButtonTooltip string ButtonIcon)`"},{"location":"classes/Plugin/NexusPluginButton/#bool-nexuspluginbuttonactive","text":"Sets if the button as active or not.","title":"bool NexusPluginButton.Active"},{"location":"classes/Plugin/NexusPluginGui/","text":"NexusPluginGui (extends NexusWrappedInstance<DockWidgetPluginGui> ) Mirrors the API of Roblox's PluginGui class. static NexusPluginGui NexusPluginGui.new(string WidgetName,DockWidgetPluginGuiInfo DockWidgetInfo) Creates a Nexus Plugin Gui object.","title":"NexusPluginGui"},{"location":"classes/Plugin/NexusPluginGui/#nexusplugingui","text":"(extends NexusWrappedInstance<DockWidgetPluginGui> ) Mirrors the API of Roblox's PluginGui class.","title":"NexusPluginGui"},{"location":"classes/Plugin/NexusPluginGui/#static-nexusplugingui-nexuspluginguinewstring-widgetnamedockwidgetpluginguiinfo-dockwidgetinfo","text":"Creates a Nexus Plugin Gui object.","title":"static NexusPluginGui NexusPluginGui.new(string WidgetName,DockWidgetPluginGuiInfo DockWidgetInfo)"},{"location":"classes/Plugin/NexusPluginToolbar/","text":"NexusPluginToolbar (extends NexusWrappedInstance<PluginToolbar> ) Mirrors the API of Roblox's PluginButton class. static NexusPluginToolbar NexusPluginToolbar.new(string ToolbarName) Creates a Nexus Plugin Toolbar object. NexusPluginButton NexusPluginToolbar:CreateButton(string ButtonName,string ButtonTooltip,string ButtonIcon) Creates a button.","title":"NexusPluginToolbar"},{"location":"classes/Plugin/NexusPluginToolbar/#nexusplugintoolbar","text":"(extends NexusWrappedInstance<PluginToolbar> ) Mirrors the API of Roblox's PluginButton class.","title":"NexusPluginToolbar"},{"location":"classes/Plugin/NexusPluginToolbar/#static-nexusplugintoolbar-nexusplugintoolbarnewstring-toolbarname","text":"Creates a Nexus Plugin Toolbar object.","title":"static NexusPluginToolbar NexusPluginToolbar.new(string ToolbarName)"},{"location":"classes/Plugin/NexusPluginToolbar/#nexuspluginbutton-nexusplugintoolbarcreatebuttonstring-buttonnamestring-buttontooltipstring-buttonicon","text":"Creates a button.","title":"NexusPluginButton NexusPluginToolbar:CreateButton(string ButtonName,string ButtonTooltip,string ButtonIcon)"},{"location":"classes/Plugin/NexusSettings/","text":"NexusSettings (extends NexusContainer ) Proxy's Roblox's settings. static NexusSettings NexusSettings.GetSettings() Returns a singleton version of the settings. NexusSettings:GetSetting(string Category,string Name) Returns the setting for the given category and name. NexusSettings:SetSetting(string Category,string Name,object Value) Sets the setting for the given category and name. NexusConnection NexusSettings:GetSettingsChangedSignal(string Category,string Name) Returns a changed signal for a given property. If the name is nil, a changed signal for the category is returned.","title":"NexusSettings"},{"location":"classes/Plugin/NexusSettings/#nexussettings","text":"(extends NexusContainer ) Proxy's Roblox's settings.","title":"NexusSettings"},{"location":"classes/Plugin/NexusSettings/#static-nexussettings-nexussettingsgetsettings","text":"Returns a singleton version of the settings.","title":"static NexusSettings NexusSettings.GetSettings()"},{"location":"classes/Plugin/NexusSettings/#nexussettingsgetsettingstring-categorystring-name","text":"Returns the setting for the given category and name.","title":"NexusSettings:GetSetting(string Category,string Name)"},{"location":"classes/Plugin/NexusSettings/#nexussettingssetsettingstring-categorystring-nameobject-value","text":"Sets the setting for the given category and name.","title":"NexusSettings:SetSetting(string Category,string Name,object Value)"},{"location":"classes/Plugin/NexusSettings/#nexusconnection-nexussettingsgetsettingschangedsignalstring-categorystring-name","text":"Returns a changed signal for a given property. If the name is nil, a changed signal for the category is returned.","title":"NexusConnection NexusSettings:GetSettingsChangedSignal(string Category,string Name)"},{"location":"classes/Plugin/NexusStudioTheme/","text":"NexusStudioTheme (extends NexusContainer ) Mirrors the API of Roblox's StudioTheme class. static NexusStudioTheme NexusStudioTheme.FromThemeEnum(UITheme ThemeType) Creates a theme class from an enum. static NexusStudioTheme NexusStudioTheme.new(UITheme ThemeType) Creates a Studio Theme object. Color3 NexusStudioTheme:GetColor(StudioStyleGuideColor StyleGuideColor,StudioStyleGuideModifier Modifier) Returns the color corresponding to the arguments provided.","title":"NexusStudioTheme"},{"location":"classes/Plugin/NexusStudioTheme/#nexusstudiotheme","text":"(extends NexusContainer ) Mirrors the API of Roblox's StudioTheme class.","title":"NexusStudioTheme"},{"location":"classes/Plugin/NexusStudioTheme/#static-nexusstudiotheme-nexusstudiothemefromthemeenumuitheme-themetype","text":"Creates a theme class from an enum.","title":"static NexusStudioTheme NexusStudioTheme.FromThemeEnum(UITheme ThemeType)"},{"location":"classes/Plugin/NexusStudioTheme/#static-nexusstudiotheme-nexusstudiothemenewuitheme-themetype","text":"Creates a Studio Theme object.","title":"static NexusStudioTheme NexusStudioTheme.new(UITheme ThemeType)"},{"location":"classes/Plugin/NexusStudioTheme/#color3-nexusstudiothemegetcolorstudiostyleguidecolor-styleguidecolorstudiostyleguidemodifier-modifier","text":"Returns the color corresponding to the arguments provided.","title":"Color3 NexusStudioTheme:GetColor(StudioStyleGuideColor StyleGuideColor,StudioStyleGuideModifier Modifier)"},{"location":"classes/Plugin/NexusUserInput/","text":"NexusUserInput (extends NexusContainer ) Static class for user input. Recommended to only use it for key presses since the key presses are from all PluginGuis and main viewport. static NexusEvent NexusUserInput.InputBegan Fired when a user begins interacting via a Human-Computer Interface device - such as a mouse or gamepad. Replaced by non-static versions when the NexusUserInput class is instanciated instead of being used as a static class. static NexusEvent NexusUserInput.InputChanged Fired when a user changes how they\u2019re interacting via a Human-Computer Interface device. Replaced by non-static versions when the NexusUserInput class is instanciated instead of being used as a static class. static NexusUserInput.InputEnded Fires when a user stops interacting via a Human-Computer Interface device. Replaced by non-static versions when the NexusUserInput class is instanciated instead of being used as a static class. void NexusUserInput:OnInputBegan(InputObject InputObject,bool Processed) Invoked when an input is began. void NexusUserInput:OnInputChanged(InputObject InputObject,bool Processed) Invoked when an input is changed. void NexusUserInput:OnInputEnded(InputObject InputObject,bool Processed) Invoked when an input is ended. void NexusUserInput:AddContext(Instance Frame) Adds a context for getting inputs. void NexusUserInput:RemoveContext(Instance Frame) Removes a context for getting inputs.","title":"NexusUserInput"},{"location":"classes/Plugin/NexusUserInput/#nexususerinput","text":"(extends NexusContainer ) Static class for user input. Recommended to only use it for key presses since the key presses are from all PluginGuis and main viewport.","title":"NexusUserInput"},{"location":"classes/Plugin/NexusUserInput/#static-nexusevent-nexususerinputinputbegan","text":"Fired when a user begins interacting via a Human-Computer Interface device - such as a mouse or gamepad. Replaced by non-static versions when the NexusUserInput class is instanciated instead of being used as a static class.","title":"static NexusEvent NexusUserInput.InputBegan"},{"location":"classes/Plugin/NexusUserInput/#static-nexusevent-nexususerinputinputchanged","text":"Fired when a user changes how they\u2019re interacting via a Human-Computer Interface device. Replaced by non-static versions when the NexusUserInput class is instanciated instead of being used as a static class.","title":"static NexusEvent NexusUserInput.InputChanged"},{"location":"classes/Plugin/NexusUserInput/#static-nexususerinputinputended","text":"Fires when a user stops interacting via a Human-Computer Interface device. Replaced by non-static versions when the NexusUserInput class is instanciated instead of being used as a static class.","title":"static NexusUserInput.InputEnded"},{"location":"classes/Plugin/NexusUserInput/#void-nexususerinputoninputbeganinputobject-inputobjectbool-processed","text":"Invoked when an input is began.","title":"void NexusUserInput:OnInputBegan(InputObject InputObject,bool Processed)"},{"location":"classes/Plugin/NexusUserInput/#void-nexususerinputoninputchangedinputobject-inputobjectbool-processed","text":"Invoked when an input is changed.","title":"void NexusUserInput:OnInputChanged(InputObject InputObject,bool Processed)"},{"location":"classes/Plugin/NexusUserInput/#void-nexususerinputoninputendedinputobject-inputobjectbool-processed","text":"Invoked when an input is ended.","title":"void NexusUserInput:OnInputEnded(InputObject InputObject,bool Processed)"},{"location":"classes/Plugin/NexusUserInput/#void-nexususerinputaddcontextinstance-frame","text":"Adds a context for getting inputs.","title":"void NexusUserInput:AddContext(Instance Frame)"},{"location":"classes/Plugin/NexusUserInput/#void-nexususerinputremovecontextinstance-frame","text":"Removes a context for getting inputs.","title":"void NexusUserInput:RemoveContext(Instance Frame)"},{"location":"classes/UI/CollapsableList/NexusCollapsableListFrame/","text":"NexusCollapsableListFrame (extends NexusWrappedInstance<Frame> ) Frame that can be expanded or collapsed to show additional information. Intended to contain additional list frames. NexusEvent NexusCollapsableListFrame.DoubleClicked Event that is invoked when the collapsable frame is clicked double-clicked. NexusEvent NexusCollapsableListFrame.DelayClicked Event that is invoked when the collapsable frame is clicked and then clicked again after a period of time has passed. Color3 NexusCollapsableListFrame.HighlightColor3 The color that is used when the frame is selected. bool NexusCollapsableListFrame.ArrowVisible Determines if the arrow for collapsing and expanding the frame is visible or not. bool NexusCollapsableListFrame.Expanded Determines if the collapsable frame is expanded (showing the collapsable container's contents). NexusWrappedInstance<Frame> NexusCollapsableListFrame:GetMainContainer() Returns the container that is next to the arrow and is not collapsed. NexusWrappedInstance<Frame> NexusCollapsableListFrame:GetCollapsableContainer() Returns the collapsable container frame. Frames parented to this will be shown or hidden based on if the frame is expanded or collapsed.","title":"NexusCollapsableListFrame"},{"location":"classes/UI/CollapsableList/NexusCollapsableListFrame/#nexuscollapsablelistframe","text":"(extends NexusWrappedInstance<Frame> ) Frame that can be expanded or collapsed to show additional information. Intended to contain additional list frames.","title":"NexusCollapsableListFrame"},{"location":"classes/UI/CollapsableList/NexusCollapsableListFrame/#nexusevent-nexuscollapsablelistframedoubleclicked","text":"Event that is invoked when the collapsable frame is clicked double-clicked.","title":"NexusEvent NexusCollapsableListFrame.DoubleClicked"},{"location":"classes/UI/CollapsableList/NexusCollapsableListFrame/#nexusevent-nexuscollapsablelistframedelayclicked","text":"Event that is invoked when the collapsable frame is clicked and then clicked again after a period of time has passed.","title":"NexusEvent NexusCollapsableListFrame.DelayClicked"},{"location":"classes/UI/CollapsableList/NexusCollapsableListFrame/#color3-nexuscollapsablelistframehighlightcolor3","text":"The color that is used when the frame is selected.","title":"Color3 NexusCollapsableListFrame.HighlightColor3"},{"location":"classes/UI/CollapsableList/NexusCollapsableListFrame/#bool-nexuscollapsablelistframearrowvisible","text":"Determines if the arrow for collapsing and expanding the frame is visible or not.","title":"bool NexusCollapsableListFrame.ArrowVisible"},{"location":"classes/UI/CollapsableList/NexusCollapsableListFrame/#bool-nexuscollapsablelistframeexpanded","text":"Determines if the collapsable frame is expanded (showing the collapsable container's contents).","title":"bool NexusCollapsableListFrame.Expanded"},{"location":"classes/UI/CollapsableList/NexusCollapsableListFrame/#nexuswrappedinstanceltframegt-nexuscollapsablelistframegetmaincontainer","text":"Returns the container that is next to the arrow and is not collapsed.","title":"NexusWrappedInstance&lt;Frame&gt; NexusCollapsableListFrame:GetMainContainer()"},{"location":"classes/UI/CollapsableList/NexusCollapsableListFrame/#nexuswrappedinstanceltframegt-nexuscollapsablelistframegetcollapsablecontainer","text":"Returns the collapsable container frame. Frames parented to this will be shown or hidden based on if the frame is expanded or collapsed.","title":"NexusWrappedInstance&lt;Frame&gt; NexusCollapsableListFrame:GetCollapsableContainer()"},{"location":"classes/UI/CollapsableList/Constraint/NexusCollapsableListFrameConstraint/","text":"NexusCollapsableListFrameConstraint (extends NexusContainer ) Abstract class for a constraint on list frames. NexusEvent NexusCollapsableListFrameConstraint.ListFrameAdded Invoked when a list frame is added to the constraint. NexusEvent NexusCollapsableListFrameConstraint.ListFrameRemoved Invoked when a list frame is removed from the constraint. NexusEvent NexusCollapsableListFrameConstraint.ListFramesUpdated Invoked when the list frames list is changed. This included frames being added, removed, and the order changing. bool NexusCollapsableListFrameConstraint:ContainsListFrame( NexusCollapsableListFrame ListFrame) Returns if the constraint contains the list frame. List< NexusCollapsableListFrame > NexusCollapsableListFrameConstraint:GetListFrames() Returns the list frames part of the constraint. List< NexusCollapsableListFrame > NexusCollapsableListFrameConstraint:GetAllListFrames(bool OnlyShowVisible) Returns all of the list frames in the constraint. void NexusCollapsableListFrameConstraint:SortListFrames(function SortFunction) Sorts the list frames using a given function. void NexusCollapsableListFrameConstraint:AddListFrame( NexusCollapsableListFrame ListFrame,int Index) Adds a list frame to the constraint. void NexusCollapsableListFrameConstraint:RemoveListFrame( NexusCollapsableListFrame ListFrame) Removes a list frame to the constraint. void NexusCollapsableListFrameConstraint:ClearListFrames() Removes all of the list frames to the constraint.","title":"NexusCollapsableListFrameConstraint"},{"location":"classes/UI/CollapsableList/Constraint/NexusCollapsableListFrameConstraint/#nexuscollapsablelistframeconstraint","text":"(extends NexusContainer ) Abstract class for a constraint on list frames.","title":"NexusCollapsableListFrameConstraint"},{"location":"classes/UI/CollapsableList/Constraint/NexusCollapsableListFrameConstraint/#nexusevent-nexuscollapsablelistframeconstraintlistframeadded","text":"Invoked when a list frame is added to the constraint.","title":"NexusEvent NexusCollapsableListFrameConstraint.ListFrameAdded"},{"location":"classes/UI/CollapsableList/Constraint/NexusCollapsableListFrameConstraint/#nexusevent-nexuscollapsablelistframeconstraintlistframeremoved","text":"Invoked when a list frame is removed from the constraint.","title":"NexusEvent NexusCollapsableListFrameConstraint.ListFrameRemoved"},{"location":"classes/UI/CollapsableList/Constraint/NexusCollapsableListFrameConstraint/#nexusevent-nexuscollapsablelistframeconstraintlistframesupdated","text":"Invoked when the list frames list is changed. This included frames being added, removed, and the order changing.","title":"NexusEvent NexusCollapsableListFrameConstraint.ListFramesUpdated"},{"location":"classes/UI/CollapsableList/Constraint/NexusCollapsableListFrameConstraint/#bool-nexuscollapsablelistframeconstraintcontainslistframe-nexuscollapsablelistframe-listframe","text":"Returns if the constraint contains the list frame.","title":"bool NexusCollapsableListFrameConstraint:ContainsListFrame( NexusCollapsableListFrame ListFrame)"},{"location":"classes/UI/CollapsableList/Constraint/NexusCollapsableListFrameConstraint/#listltnexuscollapsablelistframegt-nexuscollapsablelistframeconstraintgetlistframes","text":"Returns the list frames part of the constraint.","title":"List&lt;NexusCollapsableListFrame&gt; NexusCollapsableListFrameConstraint:GetListFrames()"},{"location":"classes/UI/CollapsableList/Constraint/NexusCollapsableListFrameConstraint/#listltnexuscollapsablelistframegt-nexuscollapsablelistframeconstraintgetalllistframesbool-onlyshowvisible","text":"Returns all of the list frames in the constraint.","title":"List&lt;NexusCollapsableListFrame&gt; NexusCollapsableListFrameConstraint:GetAllListFrames(bool OnlyShowVisible)"},{"location":"classes/UI/CollapsableList/Constraint/NexusCollapsableListFrameConstraint/#void-nexuscollapsablelistframeconstraintsortlistframesfunction-sortfunction","text":"Sorts the list frames using a given function.","title":"void NexusCollapsableListFrameConstraint:SortListFrames(function SortFunction)"},{"location":"classes/UI/CollapsableList/Constraint/NexusCollapsableListFrameConstraint/#void-nexuscollapsablelistframeconstraintaddlistframe-nexuscollapsablelistframe-listframeint-index","text":"Adds a list frame to the constraint.","title":"void NexusCollapsableListFrameConstraint:AddListFrame( NexusCollapsableListFrame ListFrame,int Index)"},{"location":"classes/UI/CollapsableList/Constraint/NexusCollapsableListFrameConstraint/#void-nexuscollapsablelistframeconstraintremovelistframe-nexuscollapsablelistframe-listframe","text":"Removes a list frame to the constraint.","title":"void NexusCollapsableListFrameConstraint:RemoveListFrame( NexusCollapsableListFrame ListFrame)"},{"location":"classes/UI/CollapsableList/Constraint/NexusCollapsableListFrameConstraint/#void-nexuscollapsablelistframeconstraintclearlistframes","text":"Removes all of the list frames to the constraint.","title":"void NexusCollapsableListFrameConstraint:ClearListFrames()"},{"location":"classes/UI/CollapsableList/Constraint/NexusContentsPropertyConstraint/","text":"NexusContentsPropertyConstraint (extends NexusCollapsableListFrameConstraint ) Constraint that passes through certain properties (Disabled and Selected) to the frames parented to the main contents frame of list frames.","title":"NexusContentsPropertyConstraint"},{"location":"classes/UI/CollapsableList/Constraint/NexusContentsPropertyConstraint/#nexuscontentspropertyconstraint","text":"(extends NexusCollapsableListFrameConstraint ) Constraint that passes through certain properties (Disabled and Selected) to the frames parented to the main contents frame of list frames.","title":"NexusContentsPropertyConstraint"},{"location":"classes/UI/CollapsableList/Constraint/NexusMultiConstraint/","text":"NexusMultiConstraint (extends NexusCollapsableListFrameConstraint ) Helper class that applies multiple constraints as one constraint. void NexusMultiConstraint:AddConstraint( NexusCollapsableListFrameConstraint Constraint) Adds a constraint.","title":"NexusMultiConstraint"},{"location":"classes/UI/CollapsableList/Constraint/NexusMultiConstraint/#nexusmulticonstraint","text":"(extends NexusCollapsableListFrameConstraint ) Helper class that applies multiple constraints as one constraint.","title":"NexusMultiConstraint"},{"location":"classes/UI/CollapsableList/Constraint/NexusMultiConstraint/#void-nexusmulticonstraintaddconstraint-nexuscollapsablelistframeconstraint-constraint","text":"Adds a constraint.","title":"void NexusMultiConstraint:AddConstraint( NexusCollapsableListFrameConstraint Constraint)"},{"location":"classes/UI/CollapsableList/Constraint/NexusSelectionConstraint/","text":"NexusMultiConstraint (extends NexusSelectionConstraint ) Constraint that ensures only one list frame or certain list frames based on the keys pressed are selected. Also adds support for arrow keys.","title":"NexusSelectionConstraint"},{"location":"classes/UI/CollapsableList/Constraint/NexusSelectionConstraint/#nexusmulticonstraint","text":"(extends NexusSelectionConstraint ) Constraint that ensures only one list frame or certain list frames based on the keys pressed are selected. Also adds support for arrow keys.","title":"NexusMultiConstraint"},{"location":"classes/UI/Constraint/NexusBoundingSizeConstraint/","text":"NexusBoundingSizeConstraint (extends NexusContainer ) Constraint that is applied to a frame to set the size as a bounding size. NexusBoundingSizeConstraint.new(Instance Frame) Creates a Nexus Bounding Size Constraint object. NexusBoundingSizeConstraint:Destroy() Destroys the constraint.","title":"NexusBoundingSizeConstraint"},{"location":"classes/UI/Constraint/NexusBoundingSizeConstraint/#nexusboundingsizeconstraint","text":"(extends NexusContainer ) Constraint that is applied to a frame to set the size as a bounding size.","title":"NexusBoundingSizeConstraint"},{"location":"classes/UI/Constraint/NexusBoundingSizeConstraint/#nexusboundingsizeconstraintnewinstance-frame","text":"Creates a Nexus Bounding Size Constraint object.","title":"NexusBoundingSizeConstraint.new(Instance Frame)"},{"location":"classes/UI/Constraint/NexusBoundingSizeConstraint/#nexusboundingsizeconstraintdestroy","text":"Destroys the constraint.","title":"NexusBoundingSizeConstraint:Destroy()"},{"location":"classes/UI/Input/NexusCheckBox/","text":"NexusCheckBox (extends NexusWrappedInstance<Frame> ) Frame that adds checkbox functionality. CheckBoxState NexusCheckBox.BoxState The state of the check box. Color3 NexusCheckBox.CheckColor3 The color of the checkmark when it is displayed. Color3 NexusCheckBox.MixedColor3 The color of the mixed fill when it is displayed. void NexusCheckBox:Toggle() Toggles the checkbox.","title":"NexusCheckBox"},{"location":"classes/UI/Input/NexusCheckBox/#nexuscheckbox","text":"(extends NexusWrappedInstance<Frame> ) Frame that adds checkbox functionality.","title":"NexusCheckBox"},{"location":"classes/UI/Input/NexusCheckBox/#checkboxstate-nexuscheckboxboxstate","text":"The state of the check box.","title":"CheckBoxState NexusCheckBox.BoxState"},{"location":"classes/UI/Input/NexusCheckBox/#color3-nexuscheckboxcheckcolor3","text":"The color of the checkmark when it is displayed.","title":"Color3 NexusCheckBox.CheckColor3"},{"location":"classes/UI/Input/NexusCheckBox/#color3-nexuscheckboxmixedcolor3","text":"The color of the mixed fill when it is displayed.","title":"Color3 NexusCheckBox.MixedColor3"},{"location":"classes/UI/Input/NexusCheckBox/#void-nexuscheckboxtoggle","text":"Toggles the checkbox.","title":"void NexusCheckBox:Toggle()"},{"location":"classes/UI/Input/NexusImageButton/","text":"NexusImageButton (extends NexusGuiButton ) Image button that disables auto button colors when disabled.","title":"NexusImageButton"},{"location":"classes/UI/Input/NexusImageButton/#nexusimagebutton","text":"(extends NexusGuiButton ) Image button that disables auto button colors when disabled.","title":"NexusImageButton"},{"location":"classes/UI/Input/NexusTextBox/","text":"NexusTextBox (extends NexusWrappedInstance<TextBox> ) Text box that disables input functionality when disabled.","title":"NexusTextBox"},{"location":"classes/UI/Input/NexusTextBox/#nexustextbox","text":"(extends NexusWrappedInstance<TextBox> ) Text box that disables input functionality when disabled.","title":"NexusTextBox"},{"location":"classes/UI/Input/NexusTextButton/","text":"NexusTextButton (extends NexusGuiButton ) Text button that disables auto button colors when disabled.","title":"NexusTextButton"},{"location":"classes/UI/Input/NexusTextButton/#nexustextbutton","text":"(extends NexusGuiButton ) Text button that disables auto button colors when disabled.","title":"NexusTextButton"},{"location":"classes/UI/Input/Abstract/NexusGuiButton/","text":"NexusCollapsableListFrameConstraint (extends NexusWrappedInstance ) Gui button that disables auto button colors when disabled. Class is abstract, so it should not be called directly. static NexusGuiButton NexusGuiButton.new(string ButtonClassName) Creates a Nexus Gui Button object.","title":"NexusGuiButton"},{"location":"classes/UI/Input/Abstract/NexusGuiButton/#nexuscollapsablelistframeconstraint","text":"(extends NexusWrappedInstance ) Gui button that disables auto button colors when disabled. Class is abstract, so it should not be called directly.","title":"NexusCollapsableListFrameConstraint"},{"location":"classes/UI/Input/Abstract/NexusGuiButton/#static-nexusguibutton-nexusguibuttonnewstring-buttonclassname","text":"Creates a Nexus Gui Button object.","title":"static NexusGuiButton NexusGuiButton.new(string ButtonClassName)"},{"location":"classes/UI/Scroll/NexusScrollBar/","text":"NexusTextBox (extends NexusWrappedInstance<Frame> ) Frame that adds scroll frame functionality. static NexusScrollBar NexusScrollBar.new( NexusScrollTheme Theme,Axis Axis) Creates a Nexus Scrolling Bar object. Color3 NexusScrollBar.ScrollColor3 Color of the background of the scroll bar and buttons. Color3 NexusScrollBar.ScrollArrowColor3 Color of the arrows on the buttons. float NexusScrollBar.RelativePosition The relative position of the scroll bar from 0 to 1. float NexusScrollBar.RelativeSize The relative size of the scroll bar. This is meant to be the frame size divided by the canvas size that the scroll bar references.","title":"NexusScrollBar"},{"location":"classes/UI/Scroll/NexusScrollBar/#nexustextbox","text":"(extends NexusWrappedInstance<Frame> ) Frame that adds scroll frame functionality.","title":"NexusTextBox"},{"location":"classes/UI/Scroll/NexusScrollBar/#static-nexusscrollbar-nexusscrollbarnewnexusscrolltheme-themeaxis-axis","text":"Creates a Nexus Scrolling Bar object.","title":"static NexusScrollBar NexusScrollBar.new(NexusScrollTheme Theme,Axis Axis)"},{"location":"classes/UI/Scroll/NexusScrollBar/#color3-nexusscrollbarscrollcolor3","text":"Color of the background of the scroll bar and buttons.","title":"Color3 NexusScrollBar.ScrollColor3"},{"location":"classes/UI/Scroll/NexusScrollBar/#color3-nexusscrollbarscrollarrowcolor3","text":"Color of the arrows on the buttons.","title":"Color3 NexusScrollBar.ScrollArrowColor3"},{"location":"classes/UI/Scroll/NexusScrollBar/#float-nexusscrollbarrelativeposition","text":"The relative position of the scroll bar from 0 to 1.","title":"float NexusScrollBar.RelativePosition"},{"location":"classes/UI/Scroll/NexusScrollBar/#float-nexusscrollbarrelativesize","text":"The relative size of the scroll bar. This is meant to be the frame size divided by the canvas size that the scroll bar references.","title":"float NexusScrollBar.RelativeSize"},{"location":"classes/UI/Scroll/NexusScrollingFrame/","text":"NexusScrollingFrame (extends NexusWrappedInstance<ScrollingFrame> ) static NexusScrollingFrame NexusScrollingFrame.new( NexusScrollTheme Theme) Creates a Nexus Scrolling Frame object. Color3 NexusScrollingFrame.ScrollColor3 Color of the background of the scroll bar and buttons. Note This is only for the Theme being NexusEnum.NexusScrollTheme.Qt5 in the constructor. This has no effect for NexusEnum.NexusScrollTheme.Native . Color3 NexusScrollingFrame.ScrollBackgroundColor3 Color of the background of the scroll bars' background. Note This is only for the Theme being NexusEnum.NexusScrollTheme.Qt5 in the constructor. This has no effect for NexusEnum.NexusScrollTheme.Native . Color3 NexusScrollingFrame.ScrollArrowColor3 Color of the arrows on the buttons. Note This is only for the Theme being NexusEnum.NexusScrollTheme.Qt5 in the constructor. This has no effect for NexusEnum.NexusScrollTheme.Native . int NexusScrollingFrame.ScrollBarButtonIncrement Increment of how many pixels the canvas size moves when pressing the scroll bar buttons. Note This is only for the Theme being NexusEnum.NexusScrollTheme.Qt5 in the constructor. This has no effect for NexusEnum.NexusScrollTheme.Native .","title":"NexusScrollingFrame"},{"location":"classes/UI/Scroll/NexusScrollingFrame/#nexusscrollingframe","text":"(extends NexusWrappedInstance<ScrollingFrame> )","title":"NexusScrollingFrame"},{"location":"classes/UI/Scroll/NexusScrollingFrame/#static-nexusscrollingframe-nexusscrollingframenewnexusscrolltheme-theme","text":"Creates a Nexus Scrolling Frame object.","title":"static NexusScrollingFrame NexusScrollingFrame.new(NexusScrollTheme Theme)"},{"location":"classes/UI/Scroll/NexusScrollingFrame/#color3-nexusscrollingframescrollcolor3","text":"Color of the background of the scroll bar and buttons. Note This is only for the Theme being NexusEnum.NexusScrollTheme.Qt5 in the constructor. This has no effect for NexusEnum.NexusScrollTheme.Native .","title":"Color3 NexusScrollingFrame.ScrollColor3"},{"location":"classes/UI/Scroll/NexusScrollingFrame/#color3-nexusscrollingframescrollbackgroundcolor3","text":"Color of the background of the scroll bars' background. Note This is only for the Theme being NexusEnum.NexusScrollTheme.Qt5 in the constructor. This has no effect for NexusEnum.NexusScrollTheme.Native .","title":"Color3 NexusScrollingFrame.ScrollBackgroundColor3"},{"location":"classes/UI/Scroll/NexusScrollingFrame/#color3-nexusscrollingframescrollarrowcolor3","text":"Color of the arrows on the buttons. Note This is only for the Theme being NexusEnum.NexusScrollTheme.Qt5 in the constructor. This has no effect for NexusEnum.NexusScrollTheme.Native .","title":"Color3 NexusScrollingFrame.ScrollArrowColor3"},{"location":"classes/UI/Scroll/NexusScrollingFrame/#int-nexusscrollingframescrollbarbuttonincrement","text":"Increment of how many pixels the canvas size moves when pressing the scroll bar buttons. Note This is only for the Theme being NexusEnum.NexusScrollTheme.Qt5 in the constructor. This has no effect for NexusEnum.NexusScrollTheme.Native .","title":"int NexusScrollingFrame.ScrollBarButtonIncrement"},{"location":"examples/collapsable-list/","text":"Collapsable List The main goal of Nexus Plugin Framework initially was to simplify creating \"collapsable lists\" and plugin windows while still acting similar to Roblox's Instance.new(...) syntax. For the example below, a window is created with a scrolling frame and collapsable frames are added. --Load Nexus Plugin Framework as a ModuleScript contained in the script. local NexusPluginFramework = require ( script : WaitForChild ( \"NexusPluginFramework\" )) --The the window. local WidgetInfo = DockWidgetPluginGuiInfo . new ( Enum . InitialDockState . Float , true , false , 200 , 200 ) local Window = NexusPluginFramework . new ( \"PluginGui\" , \"Test Window\" , WidgetInfo ) --Create a scrolling frame. local Background = NexusPluginFramework . new ( \"ScrollingFrame\" , \"Qt5\" ) Background . Size = UDim2 . new ( 1 , 0 , 1 , 0 ) Background . CanvasSize = UDim2 . new ( 2 , 0 , 2 , 0 ) Background . Parent = Window local ListLayout = NexusPluginFramework . new ( \"UIListLayout\" ) ListLayout . Parent = Background --Create the collapsable frames. for i = 1 , 5 do --Create the list frame. local ListFrame = NexusPluginFramework . new ( \"CollapsableListFrame\" ) ListFrame . Parent = Background local TextLabel = NexusPluginFramework . new ( \"TextLabel\" ) TextLabel . Text = \"Test text \" .. tostring ( i ) TextLabel . Size = UDim2 . new ( 1 , 0 , 1 , 0 ) TextLabel . TextXAlignment = \"Left\" TextLabel . Parent = ListFrame : GetMainContainer () local ListLayout = NexusPluginFramework . new ( \"UIListLayout\" ) ListLayout . Parent = ListFrame : GetCollapsableContainer () --Create the sub frames. for j = 1 , 5 do local SubListFrame = NexusPluginFramework . new ( \"CollapsableListFrame\" ) SubListFrame . Parent = ListFrame : GetCollapsableContainer () local TextLabel = NexusPluginFramework . new ( \"TextLabel\" ) TextLabel . Text = \"Test text \" .. tostring ( i ) .. \".\" .. tostring ( j ) TextLabel . Size = UDim2 . new ( 1 , 0 , 1 , 0 ) TextLabel . TextXAlignment = \"Left\" TextLabel . Parent = SubListFrame : GetMainContainer () --Select sub-frame 2 for list 3. if i == 3 and j == 2 then SubListFrame . Selected = true end end --Collapse and disable list frame 2. if i == 2 then ListFrame . Disabled = true ListFrame . Expanded = false end --Select frames 1 and 3. if i == 1 or i == 3 then ListFrame . Selected = true end end Note that above that elements aren't parented directly to the list frames. This is because it is ambigous if it is intended to be in the collapsable frame or the frame next to the arrow. While the example above works, there may be some other features that would be desirable to have, such as only having 1 item being selected at a time or the list frame being disabled altering the text of the list frame. This can be done with constraints applied to the list frames. --Load Nexus Plugin Framework as a ModuleScript contained in the script. local NexusPluginFramework = require ( script : WaitForChild ( \"NexusPluginFramework\" )) --The the window. local WidgetInfo = DockWidgetPluginGuiInfo . new ( Enum . InitialDockState . Float , true , false , 200 , 200 ) local Window = NexusPluginFramework . new ( \"PluginGui\" , \"Test Window\" , WidgetInfo ) --Create a scrolling frame. local Background = NexusPluginFramework . new ( \"ScrollingFrame\" , \"Qt5\" ) Background . Size = UDim2 . new ( 1 , 0 , 1 , 0 ) Background . CanvasSize = UDim2 . new ( 2 , 0 , 2 , 0 ) Background . Parent = Window local ListLayout = NexusPluginFramework . new ( \"UIListLayout\" ) ListLayout . Parent = Background local SelectionConstraint = NexusPluginFramework . new ( \"ListSelectionConstraint\" ) local ContentsPropertyConstraint = NexusPluginFramework . new ( \"ListContentsPropertyConstraint\" ) --Create the collapsable frames. for i = 1 , 5 do --Create the list frame. local ListFrame = NexusPluginFramework . new ( \"CollapsableListFrame\" ) ListFrame . Parent = Background SelectionConstraint : AddListFrame ( ListFrame ) ContentsPropertyConstraint : AddListFrame ( ListFrame ) local TextLabel = NexusPluginFramework . new ( \"TextLabel\" ) TextLabel . Text = \"Test text \" .. tostring ( i ) TextLabel . Size = UDim2 . new ( 1 , 0 , 1 , 0 ) TextLabel . TextXAlignment = \"Left\" TextLabel . Parent = ListFrame : GetMainContainer () local ListLayout = NexusPluginFramework . new ( \"UIListLayout\" ) ListLayout . Parent = ListFrame : GetCollapsableContainer () --Create the sub frames. for j = 1 , 5 do local SubListFrame = NexusPluginFramework . new ( \"CollapsableListFrame\" ) SubListFrame . Parent = ListFrame : GetCollapsableContainer () local TextLabel = NexusPluginFramework . new ( \"TextLabel\" ) TextLabel . Text = \"Test text \" .. tostring ( i ) .. \".\" .. tostring ( j ) TextLabel . Size = UDim2 . new ( 1 , 0 , 1 , 0 ) TextLabel . TextXAlignment = \"Left\" TextLabel . Parent = SubListFrame : GetMainContainer () --Select sub-frame 2 for list 3. if i == 3 and j == 2 then SubListFrame . Selected = true end end --Collapse and disable list frame 2. if i == 2 then ListFrame . Disabled = true ListFrame . Expanded = false end --Select frames 1 and 3. if i == 1 or i == 3 then ListFrame . Selected = true end end When using multiple constraints, a multi-constraint can be used instead to ensure that a list frame is added to all constraints. --Load Nexus Plugin Framework as a ModuleScript contained in the script. local NexusPluginFramework = require ( script : WaitForChild ( \"NexusPluginFramework\" )) --The the window. local WidgetInfo = DockWidgetPluginGuiInfo . new ( Enum . InitialDockState . Float , true , false , 200 , 200 ) local Window = NexusPluginFramework . new ( \"PluginGui\" , \"Test Window\" , WidgetInfo ) --Create a scrolling frame. local Background = NexusPluginFramework . new ( \"ScrollingFrame\" , \"Qt5\" ) Background . Size = UDim2 . new ( 1 , 0 , 1 , 0 ) Background . CanvasSize = UDim2 . new ( 2 , 0 , 2 , 0 ) Background . Parent = Window local ListLayout = NexusPluginFramework . new ( \"UIListLayout\" ) ListLayout . Parent = Background local MultiConstraint = NexusPluginFramework . new ( \"ListMultiConstraint\" ) local SelectionConstraint = NexusPluginFramework . new ( \"ListSelectionConstraint\" ) local ContentsPropertyConstraint = NexusPluginFramework . new ( \"ListContentsPropertyConstraint\" ) MultiConstraint : AddConstraint ( SelectionConstraint ) MultiConstraint : AddConstraint ( ContentsPropertyConstraint ) --Create the collapsable frames. for i = 1 , 5 do --Create the list frame. local ListFrame = NexusPluginFramework . new ( \"CollapsableListFrame\" ) ListFrame . Parent = Background MultiConstraint : AddListFrame ( ListFrame ) local TextLabel = NexusPluginFramework . new ( \"TextLabel\" ) TextLabel . Text = \"Test text \" .. tostring ( i ) TextLabel . Size = UDim2 . new ( 1 , 0 , 1 , 0 ) TextLabel . TextXAlignment = \"Left\" TextLabel . Parent = ListFrame : GetMainContainer () local ListLayout = NexusPluginFramework . new ( \"UIListLayout\" ) ListLayout . Parent = ListFrame : GetCollapsableContainer () --Create the sub frames. for j = 1 , 5 do local SubListFrame = NexusPluginFramework . new ( \"CollapsableListFrame\" ) SubListFrame . Parent = ListFrame : GetCollapsableContainer () local TextLabel = NexusPluginFramework . new ( \"TextLabel\" ) TextLabel . Text = \"Test text \" .. tostring ( i ) .. \".\" .. tostring ( j ) TextLabel . Size = UDim2 . new ( 1 , 0 , 1 , 0 ) TextLabel . TextXAlignment = \"Left\" TextLabel . Parent = SubListFrame : GetMainContainer () --Select sub-frame 2 for list 3. if i == 3 and j == 2 then SubListFrame . Selected = true end end --Collapse and disable list frame 2. if i == 2 then ListFrame . Disabled = true ListFrame . Expanded = false end --Select frames 1 and 3. if i == 1 or i == 3 then ListFrame . Selected = true end end","title":"Collapsable List"},{"location":"examples/collapsable-list/#collapsable-list","text":"The main goal of Nexus Plugin Framework initially was to simplify creating \"collapsable lists\" and plugin windows while still acting similar to Roblox's Instance.new(...) syntax. For the example below, a window is created with a scrolling frame and collapsable frames are added. --Load Nexus Plugin Framework as a ModuleScript contained in the script. local NexusPluginFramework = require ( script : WaitForChild ( \"NexusPluginFramework\" )) --The the window. local WidgetInfo = DockWidgetPluginGuiInfo . new ( Enum . InitialDockState . Float , true , false , 200 , 200 ) local Window = NexusPluginFramework . new ( \"PluginGui\" , \"Test Window\" , WidgetInfo ) --Create a scrolling frame. local Background = NexusPluginFramework . new ( \"ScrollingFrame\" , \"Qt5\" ) Background . Size = UDim2 . new ( 1 , 0 , 1 , 0 ) Background . CanvasSize = UDim2 . new ( 2 , 0 , 2 , 0 ) Background . Parent = Window local ListLayout = NexusPluginFramework . new ( \"UIListLayout\" ) ListLayout . Parent = Background --Create the collapsable frames. for i = 1 , 5 do --Create the list frame. local ListFrame = NexusPluginFramework . new ( \"CollapsableListFrame\" ) ListFrame . Parent = Background local TextLabel = NexusPluginFramework . new ( \"TextLabel\" ) TextLabel . Text = \"Test text \" .. tostring ( i ) TextLabel . Size = UDim2 . new ( 1 , 0 , 1 , 0 ) TextLabel . TextXAlignment = \"Left\" TextLabel . Parent = ListFrame : GetMainContainer () local ListLayout = NexusPluginFramework . new ( \"UIListLayout\" ) ListLayout . Parent = ListFrame : GetCollapsableContainer () --Create the sub frames. for j = 1 , 5 do local SubListFrame = NexusPluginFramework . new ( \"CollapsableListFrame\" ) SubListFrame . Parent = ListFrame : GetCollapsableContainer () local TextLabel = NexusPluginFramework . new ( \"TextLabel\" ) TextLabel . Text = \"Test text \" .. tostring ( i ) .. \".\" .. tostring ( j ) TextLabel . Size = UDim2 . new ( 1 , 0 , 1 , 0 ) TextLabel . TextXAlignment = \"Left\" TextLabel . Parent = SubListFrame : GetMainContainer () --Select sub-frame 2 for list 3. if i == 3 and j == 2 then SubListFrame . Selected = true end end --Collapse and disable list frame 2. if i == 2 then ListFrame . Disabled = true ListFrame . Expanded = false end --Select frames 1 and 3. if i == 1 or i == 3 then ListFrame . Selected = true end end Note that above that elements aren't parented directly to the list frames. This is because it is ambigous if it is intended to be in the collapsable frame or the frame next to the arrow. While the example above works, there may be some other features that would be desirable to have, such as only having 1 item being selected at a time or the list frame being disabled altering the text of the list frame. This can be done with constraints applied to the list frames. --Load Nexus Plugin Framework as a ModuleScript contained in the script. local NexusPluginFramework = require ( script : WaitForChild ( \"NexusPluginFramework\" )) --The the window. local WidgetInfo = DockWidgetPluginGuiInfo . new ( Enum . InitialDockState . Float , true , false , 200 , 200 ) local Window = NexusPluginFramework . new ( \"PluginGui\" , \"Test Window\" , WidgetInfo ) --Create a scrolling frame. local Background = NexusPluginFramework . new ( \"ScrollingFrame\" , \"Qt5\" ) Background . Size = UDim2 . new ( 1 , 0 , 1 , 0 ) Background . CanvasSize = UDim2 . new ( 2 , 0 , 2 , 0 ) Background . Parent = Window local ListLayout = NexusPluginFramework . new ( \"UIListLayout\" ) ListLayout . Parent = Background local SelectionConstraint = NexusPluginFramework . new ( \"ListSelectionConstraint\" ) local ContentsPropertyConstraint = NexusPluginFramework . new ( \"ListContentsPropertyConstraint\" ) --Create the collapsable frames. for i = 1 , 5 do --Create the list frame. local ListFrame = NexusPluginFramework . new ( \"CollapsableListFrame\" ) ListFrame . Parent = Background SelectionConstraint : AddListFrame ( ListFrame ) ContentsPropertyConstraint : AddListFrame ( ListFrame ) local TextLabel = NexusPluginFramework . new ( \"TextLabel\" ) TextLabel . Text = \"Test text \" .. tostring ( i ) TextLabel . Size = UDim2 . new ( 1 , 0 , 1 , 0 ) TextLabel . TextXAlignment = \"Left\" TextLabel . Parent = ListFrame : GetMainContainer () local ListLayout = NexusPluginFramework . new ( \"UIListLayout\" ) ListLayout . Parent = ListFrame : GetCollapsableContainer () --Create the sub frames. for j = 1 , 5 do local SubListFrame = NexusPluginFramework . new ( \"CollapsableListFrame\" ) SubListFrame . Parent = ListFrame : GetCollapsableContainer () local TextLabel = NexusPluginFramework . new ( \"TextLabel\" ) TextLabel . Text = \"Test text \" .. tostring ( i ) .. \".\" .. tostring ( j ) TextLabel . Size = UDim2 . new ( 1 , 0 , 1 , 0 ) TextLabel . TextXAlignment = \"Left\" TextLabel . Parent = SubListFrame : GetMainContainer () --Select sub-frame 2 for list 3. if i == 3 and j == 2 then SubListFrame . Selected = true end end --Collapse and disable list frame 2. if i == 2 then ListFrame . Disabled = true ListFrame . Expanded = false end --Select frames 1 and 3. if i == 1 or i == 3 then ListFrame . Selected = true end end When using multiple constraints, a multi-constraint can be used instead to ensure that a list frame is added to all constraints. --Load Nexus Plugin Framework as a ModuleScript contained in the script. local NexusPluginFramework = require ( script : WaitForChild ( \"NexusPluginFramework\" )) --The the window. local WidgetInfo = DockWidgetPluginGuiInfo . new ( Enum . InitialDockState . Float , true , false , 200 , 200 ) local Window = NexusPluginFramework . new ( \"PluginGui\" , \"Test Window\" , WidgetInfo ) --Create a scrolling frame. local Background = NexusPluginFramework . new ( \"ScrollingFrame\" , \"Qt5\" ) Background . Size = UDim2 . new ( 1 , 0 , 1 , 0 ) Background . CanvasSize = UDim2 . new ( 2 , 0 , 2 , 0 ) Background . Parent = Window local ListLayout = NexusPluginFramework . new ( \"UIListLayout\" ) ListLayout . Parent = Background local MultiConstraint = NexusPluginFramework . new ( \"ListMultiConstraint\" ) local SelectionConstraint = NexusPluginFramework . new ( \"ListSelectionConstraint\" ) local ContentsPropertyConstraint = NexusPluginFramework . new ( \"ListContentsPropertyConstraint\" ) MultiConstraint : AddConstraint ( SelectionConstraint ) MultiConstraint : AddConstraint ( ContentsPropertyConstraint ) --Create the collapsable frames. for i = 1 , 5 do --Create the list frame. local ListFrame = NexusPluginFramework . new ( \"CollapsableListFrame\" ) ListFrame . Parent = Background MultiConstraint : AddListFrame ( ListFrame ) local TextLabel = NexusPluginFramework . new ( \"TextLabel\" ) TextLabel . Text = \"Test text \" .. tostring ( i ) TextLabel . Size = UDim2 . new ( 1 , 0 , 1 , 0 ) TextLabel . TextXAlignment = \"Left\" TextLabel . Parent = ListFrame : GetMainContainer () local ListLayout = NexusPluginFramework . new ( \"UIListLayout\" ) ListLayout . Parent = ListFrame : GetCollapsableContainer () --Create the sub frames. for j = 1 , 5 do local SubListFrame = NexusPluginFramework . new ( \"CollapsableListFrame\" ) SubListFrame . Parent = ListFrame : GetCollapsableContainer () local TextLabel = NexusPluginFramework . new ( \"TextLabel\" ) TextLabel . Text = \"Test text \" .. tostring ( i ) .. \".\" .. tostring ( j ) TextLabel . Size = UDim2 . new ( 1 , 0 , 1 , 0 ) TextLabel . TextXAlignment = \"Left\" TextLabel . Parent = SubListFrame : GetMainContainer () --Select sub-frame 2 for list 3. if i == 3 and j == 2 then SubListFrame . Selected = true end end --Collapse and disable list frame 2. if i == 2 then ListFrame . Disabled = true ListFrame . Expanded = false end --Select frames 1 and 3. if i == 1 or i == 3 then ListFrame . Selected = true end end","title":"Collapsable List"},{"location":"examples/toolbar/","text":"Toolbar Example Nexus Plugin Framework deviates a bit from Roblox's native plugin system since objects like the toolbar are created using NexusPluginFramework.new(...) instead of a method in the plugin global. As an example, the following script can be used to create a toolbar with 2 buttons. --Load Nexus Plugin Framework as a ModuleScript contained in the script. local NexusPluginFramework = require ( script : WaitForChild ( \"NexusPluginFramework\" )) --Create a toolbar and 2 buttons. local Toolbar = NexusPluginFramework . new ( \"PluginToolbar\" , \"Test toolbar\" ) local Button1 = Toolbar : CreateButton ( \"Button 1\" , \"Custom tooltip\" , \"http://www.roblox.com/asset/?id=2702689330\" ) local Button2 = Toolbar : CreateButton ( \"Button 2\" , \"Custom tooltip\" , \"http://www.roblox.com/asset/?id=2702690096\" ) --Connect the events. Button1 . Click : Connect ( function () print ( \"Button 1 clicked\" ) end ) Button2 . Click : Connect ( function () print ( \"Button 2 clicked\" ) end )","title":"Toolbar"},{"location":"examples/toolbar/#toolbar-example","text":"Nexus Plugin Framework deviates a bit from Roblox's native plugin system since objects like the toolbar are created using NexusPluginFramework.new(...) instead of a method in the plugin global. As an example, the following script can be used to create a toolbar with 2 buttons. --Load Nexus Plugin Framework as a ModuleScript contained in the script. local NexusPluginFramework = require ( script : WaitForChild ( \"NexusPluginFramework\" )) --Create a toolbar and 2 buttons. local Toolbar = NexusPluginFramework . new ( \"PluginToolbar\" , \"Test toolbar\" ) local Button1 = Toolbar : CreateButton ( \"Button 1\" , \"Custom tooltip\" , \"http://www.roblox.com/asset/?id=2702689330\" ) local Button2 = Toolbar : CreateButton ( \"Button 2\" , \"Custom tooltip\" , \"http://www.roblox.com/asset/?id=2702690096\" ) --Connect the events. Button1 . Click : Connect ( function () print ( \"Button 1 clicked\" ) end ) Button2 . Click : Connect ( function () print ( \"Button 2 clicked\" ) end )","title":"Toolbar Example"}]}